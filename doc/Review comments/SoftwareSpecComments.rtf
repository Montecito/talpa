{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;}
{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;
\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\lang2057\cgrid \snext0 Normal;}{\*\cs10 \additive 
Default Paragraph Font;}{\s15\widctlpar\tqc\tx4153\tqr\tx8306\adjustright \fs20\lang2057\cgrid \sbasedon0 \snext15 header;}{\s16\widctlpar\tqc\tx4153\tqr\tx8306\adjustright \fs20\lang2057\cgrid \sbasedon0 \snext16 footer;}}{\*\listtable
{\list\listtemplateid1852461762\listsimple{\listlevel\levelnfc0\leveljc2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fi-72\li360\jclisttab\tx360 }{\listname ;}\listid579799326}
{\list\listtemplateid1852461762\listsimple{\listlevel\levelnfc0\leveljc2\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fi-72\li360\jclisttab\tx360 }{\listname ;}\listid635837862}}{\*\listoverridetable
{\listoverride\listid579799326\listoverridecount0\ls1}{\listoverride\listid635837862\listoverridecount0\ls2}}{\info{\title Who}{\author Tom Thacker}{\operator Tom Thacker}{\creatim\yr2004\mo9\dy9\hr14\min39}{\revtim\yr2004\mo12\dy3\hr11\min34}
{\printim\yr2004\mo9\dy23\hr10\min2}{\version18}{\edmins148}{\nofpages7}{\nofwords2462}{\nofchars14035}{\*\company Sophos Plc}{\nofcharsws17235}{\vern89}}\paperw16840\paperh11907\margl1440\margr1440\margt1797\margb1797 
\widowctrl\ftnbj\aenddoc\makebackup\hyphcaps0\formshade\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \lndscpsxn\psz9\linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\header \pard\plain \s15\widctlpar
\tqc\tx8505\tqr\tx14034\adjustright \fs20\lang2057\cgrid {\f1\fs24 Review comments on Talpa Software Specification v0.6}{\tab }{\f1 2004-09-23}{\tab }{\f1\cgrid0 Page }{\field{\*\fldinst {\f1\cgrid0  PAGE }}{\fldrslt {\f1\lang1024\cgrid0 7}}}{\f1\cgrid0 
 of }{\field{\*\fldinst {\f1\cgrid0  NUMPAGES }}{\fldrslt {\f1\lang1024\cgrid0 1}}}{\f1 
\par }}{\footer \pard\plain \s16\widctlpar\tqc\tx4153\tqr\tx8306\adjustright \fs20\lang2057\cgrid {\tab }{\b\f1\fs28 COMPANY CONFIDENTIAL
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 
\trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx423
\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1125\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7655\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx9072\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl
\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx14112\pard\plain \s15\widctlpar\intbl\adjustright \fs20\lang2057\cgrid {\f1 \cell }\pard\plain \qc\widctlpar\intbl\adjustright \fs20\lang2057\cgrid {\f1 
Who\cell }\pard\plain \s15\widctlpar\intbl\adjustright \fs20\lang2057\cgrid {\f1 Comment\cell }\pard\plain \qc\widctlpar\intbl\adjustright \fs20\lang2057\cgrid {\f1 Action\cell Conclusions\cell }\pard \widctlpar\intbl\adjustright {\f1 \row }\trowd 
\trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 
\clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx423\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 
\cltxlrtb \cellx1125\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7655\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx9072\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx14112{\pntext\pard\plain\intbl
\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 1\tab}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright {\f1 JC\cell }{\f1\cf1\cgrid0 
I noticed the following statement "Although primarily designed to meet the needs of high-performance on-access anti-virus scanners, it is not limited to this task and has been designed using generic extensible concepts.
". Was this specified as a requirement because if it wasn't then experience has shown that designing components like this to be used in scenarios other than what is specified in the requirements often proves to be quite expensive in terms of the additiona
l time taken and more often than not this flexibility is never used?\cell }{\f1 Close\cell This statement is really just hype for consumption by the open source community.  It is meant to promote Talpa as a work useful independently of Sophos\rquote 
 proprietary on-access scanner.  David Ascher tells us that this positioning goes a long way to keeping GPL fanatics quiet.  In any case, our competitors are all pushing the same publicity angle.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 2\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 JC\cell }\pard \sl240\slmult0\keep\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\f1\cf1\cgrid0 As already discussed with Tom's team I feel there are many issues/problems with not p
assing open file descriptors (or something of the same effect) from the kernel to userspace. Experience on Mac OS X has shown poor performance when using file paths to open files in userspace and problems with full paths not always being valid and therefo
re not being able to scan files. This would also remove the need to perform impersonation in userspace which greatly simplifies things when working with platforms which don't support per thread impersonation.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 Describe in document-ation\cell We are now doing scanning I/O in Talpa, using an API in the same general way as Falcon.  The daemon uses the IsaviStream interface to collect I/
\rquote O requests from the engine and forward them to Talpa.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 3\tab}}\pard 
\fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 JC\cell }\pard \sl240\slmult0
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1\cf1\cgrid0 Has it been shown that a Linux system will continue working if only root 
processes are allowed to perform open file requests? The reason I'm asking is that some system processes are often run under accounts other than root and therefore may cause the system to stop responding in this scenario. I'm just concerned that this feat
ure may prove to not actually offer any benefits.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 Close\cell Yes, this is OK under Linux.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 4\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 JC\cell }{\f1\cf1\cgrid0 Does pathname matching work for "chrooted" processes and other exotic processes which manipulate the filesystem they see?\cell }{\f1 Investigate\cell 
It works for \ldblquote chrooted\rdblquote  processes, but there are other cases which need investigation.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 5\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 JC\cell }\pard \sl240\slmult0\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1\cf1\cgrid0 
There is a lot of talk about use of OO design and good modularization but this seems like overkill to me. Again, I ask whether this was a requirement because if it ends up that TALPA will only be u
sed for anti-virus and the overall functionality never changes that much then all the extra effort requires to make the design so extensible would be a waste. I would have thought all that was needed was a design which allowed enough abstraction of the pl
atform specific functionality for it to be applied to other platforms.
\par 
\par In my experience when you use the C language to write OO code you end up with code which is difficult to read and understand unless you've a good understanding of the design and the C c
ode is documented extensively. This will require anyone working on TALPA in the future to keep the design documentation up-to-date and the comments in the code accurate. In practice this rarely happens.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 Close\cell A matter of opinion.  OO techniques are used in the VFS in Linux, which is coded in C.  In any case, extensibility was not the only concern \endash 
 maintainability and portability are greater ones, especially bearing in mind the variety of hooking techniques available in different kernels.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext
\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 6\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 JC\cell }\pard \sl240\slmult0\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1\cf1\cgrid0 If I understa
nd the cache design correctly when a file is opened with "write" permission's then until it's closed it will be removed from the cache. Won't there be cases where files are often opened with "write" permission's but are never written to? Won't this impact
 
performance? Also, on BSD local filesystems the "last time file status changed" field associated with an inode can safely be used as an indicator to whether a file has been modified as this field can only be changed by the underlying filesystem and not fr
om userspace. Was this considered for Linux or isn't this inode field safe?\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 No action right now, review for future release\cell 
Are files which are opened for write, but never written to, a serious problem in everyday life?  We did not want the overhead of intercepting read & write system calls, which we thought would be far more of a problem.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 7\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 JC\cell }\pard \sl240\slmult0\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\f1\cf1\cgrid0 It's mentioned that "on-close" checking can't be performed with Linux 2.6 kernels but it is possible to detect "on-close" from userspace using things such as "kqueue" 
etc. Because "on-close" checking is basically an asynchronous operation it doesn't matter that the scan may occur sometime after the event. Obviously, some interaction with the TALPA cache in the kernel would be needed etc.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 Close\cell We now think we have found out how to do on-close checking in the 2.6 kernel, and so we plan to implement it.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 8\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 JC\cell }\pard \sl240\slmult0\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {
\f1\cf1\cgrid0 How well does TALPA coexist with other kernel modules which are also employing techniques such as patching the syscall table or using LSM hooks? If problems do occur i
s it possible to detect other kernel modules doing the same and take a preventive course of action?\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 Further work\cell 
The LSM specification determines the possibility of coexistence.  Badly behaved modules from other vendors can wreck things.  We must do furthe
r work to try to spot problem situations, and determine the feasibility of unloading Talpa when other products are present.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl
\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 9\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright {\f1 JC\cell }\pard \sl240\slmult0\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1\cf1\cgrid0 
There isn't much discussion on memory usage in the kernel module or how memory is managed? Will there be problems with memory f
ragmentation in the kernel or too much wired memory taken up which could have a negative impact on the overall system performance? Or does Linux provide better built-in kernel memory management than the BSD platforms do?\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 No action right now, review for future release\cell 
Talpa uses the same memory allocation functions as the VFS.  We could substitute others, such as lookaside list managers, if that seems to be a good idea.  If the VFS works well, we don\rquote t think this is likely to be a problem warranting attentio
n in version 1.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\*\bkmkstart _Ref78817453}{\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 10\tab}}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 {\*\bkmkend _Ref78817453}SB\cell }{\f1\cf1\cgrid0 
More than one user mode process can connect.  Is this sensible for an AV product?  Could a rogue process allow access or mask a virus?}{\f1 \cell Close\cell A process must be running as root in order to connect to Talpa.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 11\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 SB\cell }{\f1\cf1\cgrid0 If the user process has to open the file again are there sharing issues involved?  
}{\f1 \cell Close\cell We are now handling files in Talpa, using an I/O API in a similar way to Falcon.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 12\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 SB\cell }{\f1\cf1\cgrid0 C written as C++ makes the code very difficult to understand.}{\f1 \cell Close\cell See reply to #5.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext
\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 13\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 SB\cell }{\f1\cf1\cgrid0 Have possibilit
ies of interaction with other third party devices that also patch the kernel been considered?  For example another device might cause a file to be opened  which may then be intercepted by us again.  Recusrion is a big issue in NT device driver development
.  The Talpa driver might find itself one of several drivers hooking the same kernel API.}{\f1 \cell Further work\cell Duplicate of #8.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl
\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 14\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 SB\cell }{\f1\cf1\cgrid0 Cache state in progress may need further examination.  It may not be safe (it isn't on NT) to wait for the result of an existing sca
n because of possible deadlock situations.}{\f1 \cell Noted\cell We don\rquote t actually use an \ldblquote in-progress\rdblquote  state thus far.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext
\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 15\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 SB\cell }{\f1\cf1\cgrid0 When to invalidate cache entries also has problems.  If for example a scan takes place during a write, at which point is it safe to save the result
s of the scan?  How are you planning to invalidate cache entries?  Are there any special ways of writing to a file.  NT for example supports memory mapping of files.}{\f1 \cell Update document-ation\cell 
We deliberately avoid intercepting write (and read) operations because of the overhead.  Memory mapped files are not believed to be a problem in Linux.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext
\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 16\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 SB\cell }{\f1\cf1\cgrid0 
In not limiting the scope of the product to anti virus you may be adding additional complexity and development effort that is not really needed.  Experience from Falco
n has suggested that implementing things in full generality significantly added to development time and was in the end thrown away once it became clear that time commitments were not going to be met.  I would favour just designing an anti-virus scanner.}{
\f1 \cell Close\cell Duplicate of #1.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\*\bkmkstart _Ref78817709}{\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 17\tab}}\pard 
\fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 {\*\bkmkend _Ref78817709}TJT
\cell }{\f1\cf1\cgrid0 p2 - Cache is a big item to have outstanding.}{\f1 \cell Close\cell The cache is nearly finished!\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 18\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p7 - TOC page numbers are wrong.}{\f1 \cell Update\cell Thank you.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 19\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p8 - What security model is used (i.e Who is allowed to register a vetting client or disable vetting). Do we require users other than root to be able to disable the on-access scanner?}{\f1 \cell 
Update document-ation\cell Only root can register a vetting client or disable on-access scanning completely.  A special group is used for avoidance of double scanning by SAVI clients.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 20\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p11 2.1 - Could we have provided a custom API using a device interface to allow the scanner access to the users file descriptor. I guess it is too late now.}{\f1 \cell Close\cell See reply to #2.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 21\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p11 2.3 - Should action taken on failure be configurable?
 May have undesired side effects/}{\f1\cgrid0 \cell }{\f1 Close\cell Failure action is configurable in the Peanut user-mode process, not in Talpa.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext
\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 22\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p11 2.4 - How is order decided for the filters. Is it the order they are added?}{\f1\cgrid0 \cell }{\f1 Update document-ation\cell 
Yes, it is the order in which they are added.  This is hard coded following the design of Talpa.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 23\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p11 2.4 Degraded mode: A simpler approach is used on NT. It seems to work.}{\f1\cgrid0 \cell }{\f1 Close\cell The NT product just disables itself completely if it has a serious problem.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 24\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p13 Operation exclus
ion processor: Does Unix have the concept of open for attribute read? It would need to be excluded.}{\f1\cgrid0 \cell }{\f1 Close\cell Unix does not have an \ldblquote open for attribute read\rdblquote  \endash 
 there is a different system call for attributes.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 25\tab}}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p13 Cache: Does the interceptor see file IO from memory mapped files? Can writes from memory mapped files continue even after the file has been closed (this is an issue on NT)?}{\f1\cgrid0 \cell }{\f1 Close\cell 
Interceptor does not see memory mapped reads & writes \endash  we avoid hooking these because of the overhead.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 26\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p13 Cach
e: The processors do not get informed about write operations. Therefore how will the processor know when to remove items from the cache or are you relying on tracking open files which have write access. I think you may still have a problem here because yo
u later state close interception is not supported on Linux 2.6 kernels.\cell }{\f1 Update document-ation\cell This is not a problem.  Files are removed from cache when they are opened for write.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 27\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p14 - Are there any stack or other restriction pertaining to code the wi
ll run in the context of the calling user?}{\f1\cgrid0 \cell }{\f1 Close\cell None known.  (BSD provides only 2K stack space)\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl
\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 28\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p15 - Why not C++? We have just switched to C++ for the NT on-access driver. It required very little support code to be developed.}{\f1\cgrid0 \cell }{
\f1 Close\cell Linus does not allow C++ modules in his kernels.  In any case developing support code would upset Sophos\rquote s management.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain
\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 29\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p23 3.4.1.1 Have parameters already been validated by the OS prior to invoking the systable call. If they have not then we will need to be very car
eful to ensure that all parameters are checked before they are used to avoid opening potential security holes.}{\f1\cgrid0 \cell }{\f1 Close\cell 
Yes, the C language RTL validates parameters, and Talpa also validates some of them.  The kernel handles copying of parameters from user space.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext
\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 30\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p23 3.4.1.1 Can the interceptor be unloaded? Will this be safe? Another product may have subsequently patched the table. It would also be removed. }{
\f1\cgrid0 \cell }{\f1 Further work\cell Duplicate of #8.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 31\tab}}\pard 
\fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p24 3.4.1.2 Is it really acceptable not to implement close checking? Also how will the cache work if we cannot intercept writes or closes?}{\f1\cgrid0 \cell }{\f1 Update document-ation\cell 
We now think we know how to do on-close checking.  The cache invalidates any file opened for writing.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 32\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p24 2.4.1.2 The statement "Any chaining characteristics are undefined". What does this mean? Will it work or will it not?}{\f1\cgrid0 \cell }{\f1 Update document-ation\cell 
It means: whether or not chaining works depends on whether other LSMs (intercepting modules) are well behaved.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 33\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p25 3.5.1.1 What would be the overhead of h
andling all processing in user mode? (i.e how strong is the case for all these kernel mode components). Various people have told me that Unix task switches much faster than NT and so this might be an acceptable solution}{\f1\cgrid0 \cell }{\f1 Close\cell 
On our machines, handling a vetting job that needs no scanning takes 4.5\'b5s.  A round-trip to user mode takes 10.5\'b5
s without any work in user mode.  Furthermore, in user mode we would need expensive system semaphores to interlock data structures which Talpa can lock with spin locks.
\par Much worse than any of this, however, is the requirement for atomic reading & updating of data structures, some of which would be in user space and some in kernel space.  This is probably impossible.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 34\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p26 3.5.2.2 How many threads will be excluded? Will h
ashing be required to optimise exclusion look-up.\cell }{\f1 Close\cell Unlimited number of threads can be excluded.  In practice on the order of 10 threads will be excluded, so hashing is not needed.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 35\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p32 3.5.2.5 What about rename checking?\cell }{\f1 Implement only if request
ed in PRD\cell Not sure this is relevant to Unix.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 36\tab}}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p33 3.5.2.6 Why not keep the syslog for the release build. The equivalent NT feature has proved useful for tracing problems at customer sites. Of course it is disabled by default.\cell }{\f1 Do it\cell Yes, good idea.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 37\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p33 3.5.2.6 Syslog will have to be the first filter.\cell }{\f1 Close\cell 
It already is the first filer.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 38\tab}}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p33 3.5.2.6 Does syslog have to support multiple languages\cell }{\f1 Close\cell Multiple languages not required.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 39\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p33 3.5.2.6 Should Syslog be enabled by default in development builds?\cell }{\f1 Close\cell We don\rquote t have development builds.  See also #36\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0
\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 40\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell 
}\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p35 Mounted file system - I do not remember seeing anything in product spec allowing the user to configure which drives should be cached.}{
\f1\cgrid0 \cell }{\f1 Close\cell See sections 5.1.2 & 5.1.3 of product spec.                                  \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 41\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p35 Mounted file system - Really need to auto-detect which drives can be cached. Otherwise all caching will have to be disabled until the user states that it is safe. This will make the product as first ins
talled very slow.}{\f1\cgrid0 \cell }{\f1 Close\cell We can enable caching according to file system type.  This effectively gives an autodetection capability.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row 
{\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 42\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p35 Cache states - Falcon uses a check in progress state.}{\f1\cgrid0 \cell }{\f1 Investigate\cell There may be a window where a file can get infecte
d after being scanned clean on behalf of another thread, and that file is still in the cache.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 
\trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb
\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx423\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1125\clvertalt\clbrdrt
\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7655\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr
\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx9072\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx14112{\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 43\tab}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p35 3.5.2.8 Have you read the Falcon on-access cache design document?}{\f1\cgrid0 \cell }{\f1 Close\cell We can\rquote t use anyone else\rquote s designs, because we must publish our source code.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row }\pard \widctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\page 
\par }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt
\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx423\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr
\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1125\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx7655\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl
\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx9072\clvertalt\clbrdrt\brdrs\brdrw30\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb 
\cellx14112{\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 44\tab}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p36 Falcon uses a chained hash (max 80% fill) and a LRU list. Memory does not appear to be a significant issue}{\f1\cgrid0 \cell }{\f1 Close\cell \cell 
}\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh
\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx423\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 
\clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1125\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 
\cltxlrtb \cellx7655\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx9072\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw15\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx14112{\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 45\tab}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p36 Falcon automatically adjusts the size of the cache based on the size of the file system cache. Large servers use 100,000+ entries }{\f1\cgrid0 \cell }{\f1 For a future release ?\cell The cache size is statically configurable at product startup.\cell 
}\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 46\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p39 There is no option to exclude by user. Required for Falcon.}{\f1\cgrid0 \cell 
}{\f1 Close\cell We have no requirement for this.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 47\tab}}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p39 Why restrict to 8 groups rather than say a 32 bit number to define order?}{\f1\cgrid0 \cell }{\f1 Update document-ation\cell There is no order, because only one scanner is ever called.  This is a classification, not an ordering.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 48\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p43 setWaitTimer : How does controller terminate if using blocking IO?}{
\f1\cgrid0 \cell }{\f1 Close\cell As in any other Unix I/O \endash  e.g. by use of signals.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 49
\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{
\f1\cf1\cgrid0 p43 I thought that the Sophos coding standards used capitals for methods (i.e SetWaitTimer) and an "m_" prefix for members.}{\f1\cgrid0 \cell }{\f1 Close\cell What Sophos coding standards ?\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 50\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p47 How are errors reported when configuration is rejected?}{\f1\cgrid0 \cell }{
\f1 Do it\cell Can be done for \ldblquote sysctl\rdblquote  calls.  \ldblquote procfs\rdblquote  interface does not allow error reporting.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain
\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 51\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p66 5.1.3 Why restrict some changes to the disabled state? }{\f1\cgrid0 \cell }{\f1 Close\cell To avoid use of mutexes.\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 52\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p69 Packing structures may cause problems on some architec
tures when accessing via C structures. For example, the Intel Itanium will give a exception attempting to read non aligned 64 bit data}{\f1\cgrid0 \cell }{\f1 Update document-ation\cell Structures are defined with members ordered by decreasing size.\cell 
}\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 53\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0
\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p69 Is the packet protocol synchronous? (i.e cannot se
nd another message until previous answer received). This is not stated but there appears to be no way to associated request and reply.}{\f1\cgrid0 \cell }{\f1 Close\cell Protocol is synchronous.  A \ldblquote vetting ID\rdblquote 
 (job sequence number) associates all packets relating to one vetting job.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 54\tab}}\pard 
\fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 
p72 5.2.10 The new Falcon on-access driver always waits for a response to a vetting request even for on-close checking. This reduces the possibility of sharing violations. Because the close is held up until the check is complete the check cannot inte
rfere with the next operation performed by the application (rename is quite common).}{\f1\cgrid0 \cell }{\f1 Investigate\cell More work needs to be done on on-close checking.\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 55\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p77 5.3 Is there a requirement to provide continuous protection whilst the talpa components are updated?}{\f1\cgrid0 \cell }{\f1 Future release\cell 
No requirement for this release\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 56\tab}}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p77 5
.3 Who is allowed to use the device?}{\f1\cgrid0 \cell }{\f1 Close\cell Only root\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 57\tab}
}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 TJT\cell }{
\f1\cf1\cgrid0 p77 5.4 Who is allowed to use the device?}{\f1\cgrid0 \cell }{\f1 Close\cell Only root\cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row {\pntext\pard\plain\intbl\f1\fs20\cgrid 
\hich\af1\dbch\af0\loch\f1 58\tab}}\pard \fi-72\li360\widctlpar\intbl\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }
\adjustright {\f1 TJT\cell }{\f1\cf1\cgrid0 p82 8.2 Could we detect that the in-kernel NFS server is in use and warn the user during the installation.}{\f1\cgrid0 \cell }{\f1 Investigate\cell Don\rquote t know yet\cell }\pard 
\widctlpar\intbl{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\f1 \row }\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw30\brdrcf1 \trbrdrl\brdrs\brdrw30\brdrcf1 \trbrdrb\brdrs\brdrw30\brdrcf1 \trbrdrr\brdrs\brdrw30\brdrcf1 \trbrdrh
\brdrs\brdrw15\brdrcf1 \trbrdrv\brdrs\brdrw15\brdrcf1 \clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw30\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx423\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 
\clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx1125\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 
\cltxlrtb \cellx7655\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw15\brdrcf1 \cltxlrtb \cellx9072\clvertalt\clbrdrt\brdrs\brdrw15\brdrcf1 \clbrdrl\brdrs\brdrw15\brdrcf1 \clbrdrb
\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx14112{\*\bkmkstart _Ref78818281}{\pntext\pard\plain\intbl\f1\fs20\cgrid \hich\af1\dbch\af0\loch\f1 59\tab}\pard \fi-72\li360\widctlpar\intbl
\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent648\pnhang}\ls2\adjustright {\f1 \cell }\pard \widctlpar\intbl\adjustright {\f1 {\*\bkmkend _Ref78818281}TJT\cell }{\f1\cf1\cgrid0 
p82 8.2 Are there no alternatives to allow us to hook closes?}{\f1\cgrid0 \cell }{\f1 Close\cell See #7 above.\cell }\pard \widctlpar\intbl\adjustright {\f1 \row }\pard \widctlpar\adjustright {\f1 
\par 
\par }\pard \widctlpar\outlinelevel0\adjustright {\f1 
\par }{\b\f1 Legend:}{\f1 
\par }\pard \widctlpar\adjustright {\f1 
\par }{\b\f1 JAP}{\f1 \tab John Phelps
\par }{\b\f1 JC}{\f1 \tab Jamie Cox
\par }{\b\f1 SB}{\f1 \tab Steven Braggs
\par }{\b\f1 TJT}{\f1 \tab Tim Twaits
\par }{
\par }}